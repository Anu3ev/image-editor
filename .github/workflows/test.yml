name: 🧪 Tests & Quality Checks

# Workflow для запуска тестов на разных версиях Node.js
on:
  pull_request:
    branches: [ master, main ]  # Тестируем только PR в основные ветки
  push:
    branches: [ master, main ]  # Проверяем качество только основных веток после мержа

permissions:
  contents: read
  statuses: write
  issues: write
  pull-requests: write

jobs:
  test:
    name: "🔬 Test on Node.js ${{ matrix.node-version }}"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20]  # Только актуальная LTS версия
      fail-fast: false  # Не останавливаем другие версии при падении одной

    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4

      - name: "🔧 Setup Node.js ${{ matrix.node-version }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: "📦 Install dependencies"
        run: |
          echo "🔍 Installing npm dependencies for Node.js ${{ matrix.node-version }}"
          npm ci
          echo "✅ Dependencies installed successfully"

      - name: "🔍 Run ESLint code quality check"
        run: |
          echo "🔍 Running ESLint on src/**/*.{js,ts} files"
          npm run lint
          echo "✅ Code quality check passed"

      - name: "🧪 Run tests with coverage"
        run: |
          echo "🧪 Running Jest tests with coverage on Node.js ${{ matrix.node-version }}"
          echo "📊 Test files pattern: specs/**/*.{test,spec}.ts"
          npm run test:ci
          echo "✅ All tests passed successfully"

      - name: "📊 Generate detailed coverage report"
        if: matrix.node-version == 20  # Генерируем детальный отчёт только для одной версии
        run: |
          echo "📊 Generating detailed coverage report for artifacts"
          npm run test:coverage
          echo "✅ Coverage report generated"

      - name: "📤 Upload coverage artifacts"
        if: matrix.node-version == 20
        uses: actions/upload-artifact@v4
        with:
          name: "coverage-report-node${{ matrix.node-version }}"
          path: coverage/
          retention-days: 30

      - name: "💬 Post PR comment with results"
        if: github.event_name == 'pull_request' && matrix.node-version == 20
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            console.log('📝 Preparing PR comment with test results...');

            const nodeVersion = '${{ matrix.node-version }}';
            const emoji = '✅';

            let comment = `${emoji} **Результаты тестирования на Node.js ${nodeVersion}**\n\n`;
            comment += '🎉 Все тесты прошли успешно!\n\n';

            // Добавляем информацию о покрытии
            try {
              const coverageExists = fs.existsSync('coverage/coverage-summary.json');
              if (coverageExists) {
                console.log('📊 Reading coverage summary...');
                const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
                const total = coverage.total;

                comment += '📊 **Покрытие кода:**\n';
                comment += `- 📝 Строки: ${total.lines.pct}%\n`;
                comment += `- ⚡ Функции: ${total.functions.pct}%\n`;
                comment += `- 🌿 Ветки: ${total.branches.pct}%\n`;
                comment += `- ✨ Утверждения: ${total.statements.pct}%\n\n`;

                comment += `🔗 [Скачать полный отчёт о покрытии](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n`;
              }
            } catch (e) {
              console.log('⚠️ Coverage info not available:', e.message);
            }

            comment += '---\n';
            comment += `🤖 Протестировано на Node.js ${nodeVersion} | ⏱️ ${new Date().toLocaleString('ru-RU')}`;

            console.log('💬 Posting comment to PR...');

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

            console.log('✅ PR comment posted successfully');

      - name: "🏷️ Create commit status"
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const jobStatus = '${{ job.status }}';
            const nodeVersion = '${{ matrix.node-version }}';

            console.log(`📊 Job status: ${jobStatus} for Node.js ${nodeVersion}`);

            const state = jobStatus === 'success' ? 'success' : 'failure';
            const description = jobStatus === 'success'
              ? `✅ Tests passed on Node.js ${nodeVersion}`
              : `❌ Tests failed on Node.js ${nodeVersion}`;

            console.log(`🏷️ Creating commit status: ${state} - ${description}`);

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              target_url: `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
              description: description,
              context: `tests/node-${nodeVersion}`
            });

            console.log('✅ Commit status created successfully');
