name: üß™ Tests & Quality Checks

# Workflow –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏—è—Ö Node.js
on:
  pull_request:
    branches: [ master, main ]  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ PR –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–µ—Ç–∫–∏
  push:
    branches: [ master, main ]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–µ—Ç–æ–∫ –ø–æ—Å–ª–µ –º–µ—Ä–∂–∞

permissions:
  contents: read
  statuses: write
  issues: write
  pull-requests: write

jobs:
  test:
    name: "üî¨ Test on Node.js ${{ matrix.node-version }}"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20]  # –¢–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è LTS –≤–µ—Ä—Å–∏—è
      fail-fast: false  # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –æ–¥–Ω–æ–π

    steps:
      - name: "üì• Checkout repository"
        uses: actions/checkout@v4

      - name: "üîß Setup Node.js ${{ matrix.node-version }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: "üì¶ Install dependencies"
        run: |
          echo "üîç Installing npm dependencies for Node.js ${{ matrix.node-version }}"
          npm ci
          echo "‚úÖ Dependencies installed successfully"

      - name: "üîç Run ESLint code quality check"
        run: |
          echo "üîç Running ESLint on src/**/*.{js,ts} files"
          npm run lint
          echo "‚úÖ Code quality check passed"

      - name: "üß™ Run tests with coverage"
        id: run-tests
        run: |
          echo "üß™ Running Jest tests with coverage on Node.js ${{ matrix.node-version }}"
          echo "üìä Test files pattern: specs/**/*.{test,spec}.ts"
          npm run test:ci 2>&1 | tee test-output.log
          echo "‚úÖ All tests passed successfully"
        continue-on-error: true

      - name: "üìä Generate detailed coverage report"
        if: steps.run-tests.outcome == 'success' && matrix.node-version == 20
        run: |
          echo "üìä Generating detailed coverage report for artifacts"
          npm run test:coverage
          echo "‚úÖ Coverage report generated"

      - name: "üì§ Upload coverage artifacts"
        if: steps.run-tests.outcome == 'success' && matrix.node-version == 20
        uses: actions/upload-artifact@v4
        with:
          name: "coverage-report-node${{ matrix.node-version }}"
          path: coverage/
          retention-days: 30

      - name: "üí¨ Update PR comment with results"
        if: github.event_name == 'pull_request' && matrix.node-version == 20 && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            console.log('üìù Preparing PR comment with test results...');

            const nodeVersion = '${{ matrix.node-version }}';
            const testResult = '${{ steps.run-tests.outcome }}';
            const emoji = testResult === 'success' ? '‚úÖ' : '‚ùå';

            let comment = `${emoji} **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Node.js ${nodeVersion}**\n\n`;

            if (testResult === 'success') {
              comment += 'üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!\n\n';

              // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
              try {
                const coverageExists = fs.existsSync('coverage/coverage-summary.json');
                if (coverageExists) {
                  console.log('üìä Reading coverage summary...');
                  const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
                  const total = coverage.total;

                  comment += '## üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏\n\n';
                  comment += '> üí° **–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç?** –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∞—è —á–∞—Å—Ç—å –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —Ç–µ—Å—Ç–∞–º–∏.\n\n';
                  
                  comment += `| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ | –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è |\n`;
                  comment += `|---------|----------|------------------|\n`;
                  comment += `| üìù **–°—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞** | **${total.lines.pct}%** | –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤ |\n`;
                  comment += `| ‚ö° **–§—É–Ω–∫—Ü–∏–∏** | **${total.functions.pct}%** | –°–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ |\n`;
                  comment += `| üåø **–í–µ—Ç–≤–ª–µ–Ω–∏—è** | **${total.branches.pct}%** | –°–∫–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–π if/else/switch –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ |\n`;
                  comment += `| ‚ú® **–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è** | **${total.statements.pct}%** | –°–∫–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ |\n\n`;
                  
                  // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ñ–∞–π–ª–∞–º
                  comment += '### üìÅ –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —Ñ–∞–π–ª–∞–º:\n\n';
                  Object.keys(coverage).forEach(filePath => {
                    if (filePath !== 'total') {
                      const fileStats = coverage[filePath];
                      const fileName = filePath.split('/').pop();
                      comment += `- **${fileName}**: ${fileStats.lines.pct}% —Å—Ç—Ä–æ–∫, ${fileStats.functions.pct}% —Ñ—É–Ω–∫—Ü–∏–π\n`;
                    }
                  });
                  
                  comment += `\nüîó [–°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n`;
                  
                  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                  if (total.lines.pct < 80) {
                    comment += '‚ö†Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –ü–æ–∫—Ä—ã—Ç–∏–µ –Ω–∏–∂–µ 80%. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ –∫–æ–¥–∞.\n\n';
                  } else if (total.lines.pct >= 90) {
                    comment += 'üèÜ **–û—Ç–ª–∏—á–Ω–æ!** –í—ã—Å–æ–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏. –í–∞—à –∫–æ–¥ —Ö–æ—Ä–æ—à–æ –∑–∞—â–∏—â—ë–Ω –æ—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–π.\n\n';
                  }
                }
              } catch (e) {
                console.log('‚ö†Ô∏è Coverage info not available:', e.message);
              }
            } else {
              comment += 'üí• **–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã —É–ø–∞–ª–∏!**\n\n';
              comment += '‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ**: –ú–µ—Ä–∂ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.\n\n';
              
              // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö –∏–∑ –ª–æ–≥–∞
              try {
                if (fs.existsSync('test-output.log')) {
                  const testOutput = fs.readFileSync('test-output.log', 'utf8');
                  
                  // –ò—â–µ–º —É–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã
                  const failedTests = testOutput.match(/FAIL\s+(.+\.spec\.ts)/g);
                  if (failedTests) {
                    comment += '## üîç –£–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã:\n\n';
                    failedTests.forEach(failLine => {
                      const filePath = failLine.replace('FAIL ', '').trim();
                      const fileName = filePath.split('/').pop();
                      comment += `- ‚ùå **${fileName}**\n`;
                    });
                    comment += '\n';
                  }
                  
                  // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
                  const errorLines = testOutput.split('\n').filter(line => 
                    line.includes('Expected:') || 
                    line.includes('Received:') ||
                    line.includes('at Object.<anonymous>')
                  );
                  
                  if (errorLines.length > 0) {
                    comment += '## üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:\n\n';
                    comment += '```\n';
                    comment += errorLines.slice(0, 10).join('\n'); // –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
                    comment += '\n```\n\n';
                  }
                }
              } catch (e) {
                console.log('‚ö†Ô∏è Could not parse test output:', e.message);
              }
              
              comment += `üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n`;
            }

            comment += '---\n';
            comment += `ü§ñ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ Node.js ${nodeVersion} | ‚è±Ô∏è ${new Date().toLocaleString('ru-RU')}`;

            console.log('üí¨ Looking for existing comment to update...');

            // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Node.js')
            );

            if (botComment) {
              console.log('üîÑ Updating existing comment...');
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
              console.log('‚úÖ Comment updated successfully');
            } else {
              console.log('üìù Creating new comment...');
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('‚úÖ New comment created successfully');
            }

      - name: "üè∑Ô∏è Create commit status"
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const testResult = '${{ steps.run-tests.outcome }}';
            const nodeVersion = '${{ matrix.node-version }}';

            console.log(`üìä Test result: ${testResult} for Node.js ${nodeVersion}`);

            const state = testResult === 'success' ? 'success' : 'failure';
            const description = testResult === 'success'
              ? `‚úÖ Tests passed on Node.js ${nodeVersion}`
              : `‚ùå Tests failed on Node.js ${nodeVersion}`;

            console.log(`üè∑Ô∏è Creating commit status: ${state} - ${description}`);

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              target_url: `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
              description: description,
              context: `tests/node-${nodeVersion}`
            });

            console.log('‚úÖ Commit status created successfully');
