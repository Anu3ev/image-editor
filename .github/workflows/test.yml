name: Tests

on:
  pull_request:
    branches: [ master, main, refactor ]
  push:
    branches: [ master, main, refactor ]

permissions:
  contents: read
  statuses: write
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint
        continue-on-error: true

      - name: Run tests
        run: npm run test:ci

      - name: Generate test coverage
        run: npm run test:coverage
        if: matrix.node-version == 20

      - name: Upload coverage to artifact
        uses: actions/upload-artifact@v4
        if: matrix.node-version == 20
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: Comment PR with test results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const fs = require('fs');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤
            const testStatus = '${{ job.status }}';
            const nodeVersion = '${{ matrix.node-version }}';
            const emoji = testStatus === 'success' ? '‚úÖ' : '‚ùå';
            
            let comment = `${emoji} **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ (Node.js ${nodeVersion})**\n\n`;
            
            if (testStatus === 'success') {
              comment += 'üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!\n\n';
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—Ä—ã—Ç–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
              if (nodeVersion === '20') {
                try {
                  const coverageExists = fs.existsSync('coverage/coverage-summary.json');
                  if (coverageExists) {
                    const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
                    const total = coverage.total;
                    
                    comment += 'üìä **–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞:**\n';
                    comment += `- –°—Ç—Ä–æ–∫–∏: ${total.lines.pct}%\n`;
                    comment += `- –§—É–Ω–∫—Ü–∏–∏: ${total.functions.pct}%\n`;
                    comment += `- –í–µ—Ç–∫–∏: ${total.branches.pct}%\n`;
                    comment += `- –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${total.statements.pct}%\n\n`;
                  }
                } catch (e) {
                  console.log('Coverage info not available');
                }
              }
            } else {
              comment += 'üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã —É–ø–∞–ª–∏!\n\n';
              comment += '‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ**: –ú–µ—Ä–∂ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.\n\n';
              comment += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.';
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è Node.js 20 —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
            if (nodeVersion === '20') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
